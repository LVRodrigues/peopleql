//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0
//! 
use async_graphql::SimpleObject;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, SimpleObject)]
#[sea_orm(table_name = "questions")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub question: Uuid,
    pub card: Uuid,
    #[sea_orm(column_type = "Text")]
    pub text: String,
    #[sea_orm(column_type = "Text")]
    pub evidence: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::cards::Entity",
        from = "Column::Card",
        to = "super::cards::Column::Card",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Cards,
}

impl Related<super::cards::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Cards.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
